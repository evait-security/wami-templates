name: Add Program to Lake

on:
  issues:
    types: [labeled]

jobs:
  add_program_to_lake:
    if: github.event.label.name == 'Generate with AI'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Extract GitHub URL
        id: extract_url
        run: |
          # Using heredoc to safely handle multiline strings
          cat << 'EOF' > extract_url.sh
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Search for GitHub URLs in title and body
          GITHUB_URL=$(printf '%s %s' "$ISSUE_TITLE" "$ISSUE_BODY" | grep -o 'https://github.com/[a-zA-Z0-9._-]*/[a-zA-Z0-9._-]*' | head -n 1)
          
          if [ -z "${GITHUB_URL}" ]; then
            echo "::error::No valid GitHub URL found"
            exit 1
          fi
          
          echo "url=${GITHUB_URL}" >> $GITHUB_OUTPUT
          EOF
          
          chmod +x extract_url.sh
          ./extract_url.sh

      - name: Fetch repository metadata
        id: fetch_metadata
        if: success()
        run: |
          # Using heredoc to safely handle multiline strings
          cat << 'EOF' > fetch_metadata.sh
          GITHUB_URL="${{ steps.extract_url.outputs.url }}"
          OWNER_REPO=$(echo "$GITHUB_URL" | sed 's|https://github.com/||')
          
          # Fetch repository info
          REPO_INFO=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${OWNER_REPO}")
          
          if [ "$(echo "$REPO_INFO" | jq -r 'has("message")')" = "true" ]; then
            echo "::error::Failed to fetch repository info: $(echo "$REPO_INFO" | jq -r '.message')"
            exit 1
          fi
          
          # Extract metadata
          REPO_NAME=$(echo "$REPO_INFO" | jq -r '.name')
          REPO_DESC=$(echo "$REPO_INFO" | jq -r '.description')
          
          # Try different README variants and branches
          README_VARIANTS=("README.md" "readme.md" "Readme.md" "README.txt" "readme.txt" "README")
          BRANCHES=("main" "master")
          
          for BRANCH in "${BRANCHES[@]}"; do
            for README_FILE in "${README_VARIANTS[@]}"; do
              README_URL="https://raw.githubusercontent.com/${OWNER_REPO}/${BRANCH}/${README_FILE}"
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$README_URL")
              
              if [ "$HTTP_CODE" = "200" ]; then
                # Fetch and clean README content
                README_CONTENT=$(curl -s "$README_URL" | sed -E '
                  # Remove HTML tags
                  s/<[^>]*>//g;
                  # Remove image references
                  s/!\[[^]]*\]([^)]*))//g;
                  # Remove badges
                  s/\[[^]]*\]\(https:\/\/img\.shields\.io[^)]*\)//g;
                  # Remove empty lines at start of file
                  /./,$!d;
                  # Remove multiple empty lines
                  /^$/N;/^\n$/D;
                  # Remove special characters
                  s/[[:cntrl:]]//g;
                  # Remove links but keep text
                  s/\[([^]]*)\]\([^)]*\)/\1/g;
                ')
                
                if [ -n "$README_CONTENT" ]; then
                  break 2
                fi
              fi
            done
          done
          
          if [ -z "${README_CONTENT}" ]; then
            README_CONTENT="No README found"
          else
            # Additional cleaning and verification
            README_CONTENT=$(echo "$README_CONTENT" | awk '
              NR==1{if($0~/^[[:space:]]*$/){next}}  # Skip if first line is empty
              {gsub(/\r/,"")}                       # Remove carriage returns
              {gsub(/^[[:space:]]+|[[:space:]]+$/,"")} # Trim whitespace
              length>0{print}                       # Only print non-empty lines
            ')
          fi
          
          {
            echo "repo_name=${REPO_NAME}"
            echo "repo_desc<<EOF"
            echo "${REPO_DESC}"
            echo "EOF"
            echo "readme<<EOF"
            echo "${README_CONTENT:0:1000}"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          EOF
          
          chmod +x fetch_metadata.sh
          ./fetch_metadata.sh

      - name: Generate YAML
        id: generate_yaml
        if: success()
        run: |
          # Using heredoc for the prompt template
          cat << 'EOF' > prompt.txt
          Generate a YAML file that follows this exact structure, providing only the YAML content without any comments or explanations:

          id: lowercase_repository_name
          title: RepositoryName - Brief one-line description
          tags:
            - programming_language_used
            - core_protocol_or_standard
            - authentication_protocol
            - primary_purpose
            - core_functionality_1
            - core_functionality_2
            - technical_feature_1
            - technical_feature_2
            - platform_or_system
            - implementation_approach
            - performance_aspect
            - security_feature_1
            - security_feature_2
            - integration_capability
            - usage_pattern
          references:
            - repository_url
            - additional_urls
          description: Single paragraph description without any YAML special characters or formatting indicators
          why_not: Alternative tool suggestion or empty string

          Tag Generation Rules:
          - Include at least 15 specific, descriptive tags in a flat list
          - Always include core protocols (e.g., smb, ldap, http)
          - Always include the programming language
          - Include authentication methods when relevant
          - Include specific technical capabilities
          - Add security features and protocols
          - Include operational characteristics (e.g., threaded, async)
          - Add implementation and deployment details
          - Include integration capabilities
          - Add usage patterns and contexts

          General Rules:
          - Generate pure YAML only, no meta-comments or notes
          - No empty lines at start or end
          - No YAML block indicators (>, |, etc.)
          - No quotes unless absolutely necessary
          - Keep title as a single continuous line
          - Description should be a single paragraph without line breaks
          - Tags must be in a simple flat list without categories
          EOF
          
          # Create request body
          REQUEST_JSON=$(jq -n \
            --arg model "gpt-4" \
            --arg system "You are a YAML generator that produces only pure YAML content. Do not include any explanatory text, comments, or notes about formatting. Output raw YAML content directly without any wrapper text or meta-commentary." \
            --arg prompt "$(cat prompt.txt)" \
            --arg name "${{ steps.fetch_metadata.outputs.repo_name }}" \
            --arg desc "${{ steps.fetch_metadata.outputs.repo_desc }}" \
            --arg readme "${{ steps.fetch_metadata.outputs.readme }}" \
            --arg url "${{ steps.extract_url.outputs.url }}" \
            '{
              model: $model,
              messages: [
                {role: "system", content: $system},
                {role: "user", content: ($prompt + "\n\nRepository name: " + $name + "\nDescription: " + $desc + "\nREADME excerpt:\n" + $readme + "\nGitHub URL: " + $url)}
              ]
            }')
          
          # Make API request
          RESPONSE=$(curl -s -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$REQUEST_JSON" \
            "https://api.openai.com/v1/chat/completions")
          
          # Extract and validate YAML content
          YAML_CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content' | sed 's/```yaml//g' | sed 's/```//g')
          
          # Save YAML content
          echo "yaml_content<<EOF" >> $GITHUB_OUTPUT
          echo "$YAML_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Save YAML to lake directory
        if: success()
        run: |
          mkdir -p lake
          cat << 'YAMLEOF' > "lake/${{ steps.fetch_metadata.outputs.repo_name }}.yaml"
          ${{ steps.generate_yaml.outputs.yaml_content }}
          YAMLEOF
          
      - name: Commit and push changes
        if: success()
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add lake/
          git commit -m "Add new program: ${{ steps.fetch_metadata.outputs.repo_name }}"
          git push
