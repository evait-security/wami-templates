name: Add Program to Lake

on:
  issues:
    types: [labeled]

jobs:
  add_program_to_lake:
    if: github.event.label.name == 'Generate with AI'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Extract GitHub URL from issue
        id: extract_url
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          GITHUB_URL=$(echo "$ISSUE_TITLE $ISSUE_BODY" | grep -o 'https://github.com/[a-zA-Z0-9._-]*/[a-zA-Z0-9._-]*' | head -n 1)
          
          if [ -z "$GITHUB_URL" ]; then
            echo "No valid GitHub URL found in the issue."
            echo "valid_url=false" >> $GITHUB_OUTPUT
          else  
            echo "valid_url=true" >> $GITHUB_OUTPUT
            echo "url=$GITHUB_URL" >> $GITHUB_OUTPUT
          fi
      
      - name: Fetch repository metadata
        id: fetch_metadata
        if: steps.extract_url.outputs.valid_url == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_URL="${{ steps.extract_url.outputs.url }}"
          OWNER_REPO=$(echo "$REPO_URL" | sed 's|https://github.com/||')

          REPO_INFO=$(gh api /repos/$OWNER_REPO)
          
          REPO_NAME=$(echo "$REPO_INFO" | jq -r '.name')
          REPO_DESC=$(echo "$REPO_INFO" | jq -r '.description')

          README_FILES=("README.md" "readme.md" "Readme.md" "ReadMe.md" "README.txt" "readme.txt" "Readme.txt" "ReadMe.txt" "README" "readme" "Readme" "ReadMe")
          BRANCHES=("main" "master")

          for BRANCH in "${BRANCHES[@]}"; do
            for README_FILE in "${README_FILES[@]}"; do
              README_URL="https://raw.githubusercontent.com/$OWNER_REPO/$BRANCH/$README_FILE"  
              
              if curl --output /dev/null --silent --head --fail "$README_URL"; then
                README=$(curl -s "$README_URL")
                break 2
              fi
            done
          done

          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "repo_desc<<EOF" >> $GITHUB_OUTPUT
          echo "$REPO_DESC" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "readme<<EOF" >> $GITHUB_OUTPUT 
          echo "$README" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Generate YAML with ChatGPT
        id: chatgpt_response 
        if: steps.extract_url.outputs.valid_url == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          REQUEST_BODY=$(jq -n \
            --arg model "gpt-4" \
            --arg system "You are an experienced YAML generator. Use the provided structure exactly as described. Only valid YAML code is allowed, no special characters that could break an interpreter. The only response is the YAML output." \
            --arg name "${{ steps.fetch_metadata.outputs.repo_name }}" \
            --arg desc "${{ steps.fetch_metadata.outputs.repo_desc }}" \
            --arg readme "${{ steps.fetch_metadata.outputs.readme }}" \
            --arg url "${{ steps.extract_url.outputs.url }}" \
            --arg prompt "Create a YAML file with the following structure for a software repository:\n\nid: Unique identifier (repository name, without spaces or special characters)\ntitle: A title in the format \"<repository name> - <short description>\"\ntags: A list of tags related to the repository extracted from the README, GitHub project description, and common keywords\ndescription: A detailed description of the repository (based on the GitHub description and README) \nreferences:\n  - A list of URLs, including the GitHub repo URL and relevant documentation/download links\nwhy_not: A suggestion of why another similar tool might be used instead, or leave it empty if no suggestion is found.\n\n" \
            '{
              model: $model,
              messages: [
                {role: "system", content: $system},
                {role: "user", content: ($prompt + "Repository name: " + $name + "\nDescription: " + $desc + "\nREADME excerpt:\n" + $readme + "\nGitHub URL: " + $url)}
              ]
            }')

          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$REQUEST_BODY")

          YAML_CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content' | sed 's/```yaml//g' | sed 's/```//g')

          echo "yaml_content<<EOF" >> $GITHUB_OUTPUT
          echo "$YAML_CONTENT" >> $GITHUB_OUTPUT 
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Save YAML to lake directory  
        if: steps.extract_url.outputs.valid_url == 'true'
        run: |
          mkdir -p lake
          echo "${{ steps.chatgpt_response.outputs.yaml_content }}" > "lake/${{ steps.fetch_metadata.outputs.repo_name }}.yaml"

      - name: Commit and push changes
        if: steps.extract_url.outputs.valid_url == 'true' 
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add lake/
          git commit -m "Add new program: ${{ steps.fetch_metadata.outputs.repo_name }}" 
          git push