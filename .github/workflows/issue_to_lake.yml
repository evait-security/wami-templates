name: Add Program to Lake

on:
  issues:
    types: [opened]

jobs:
  add_program_to_lake:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Extract GitHub URL from issue title and body
        id: extract_url
        run: |
          echo "Extracting URL from issue..."
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          # Search for GitHub URLs in title and body
          GITHUB_URL=$(echo "$ISSUE_TITLE $ISSUE_BODY" | grep -o 'https://github.com/[a-zA-Z0-9._-]*/[a-zA-Z0-9._-]*')
          echo "URL extracted: $GITHUB_URL"
          echo "url=${GITHUB_URL}" | sed 's/.*https:\/\/github\.com\/\([^\/]*\/[^\/]*\).*/\1/' | tr -d '\n' > url.txt
          if [ -z "${GITHUB_URL}" ]; then
            echo "No URL found."
            echo "valid_url=false" >> $GITHUB_ENV
          else
            echo "valid_url=true" >> $GITHUB_ENV
            echo "::set-output name=url::${GITHUB_URL}"
          fi

      - name: Fetch repository metadata
        id: fetch_metadata
        run: |
          if [ -z "${{ steps.extract_url.outputs.url }}" ]; then
            echo "No valid GitHub URL found in the issue. Exiting."
            exit 1
          fi
          echo "Fetching metadata for ${{ steps.extract_url.outputs.url }}..."
          GITHUB_URL="${{ steps.extract_url.outputs.url }}"
          echo "Have the GITHUB_URL=$GITHUB_URL"
          OWNER_REPO=$(echo "$GITHUB_URL" | sed 's|https://github.com/||')
          REPO_INFO=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${OWNER_REPO}")
          REPO_NAME=$(echo "$REPO_INFO" | jq -r '.name')
          REPO_DESC=$(echo "$REPO_INFO" | jq -r '.description')
          README=$(curl -s -H "Accept: application/vnd.github.v3.raw" \
            "https://raw.githubusercontent.com/${OWNER_REPO}/main/README.md" || echo "No README found")
          
          # Shorten the README to minimize tokens
          SHORT_README=$(echo "$README" | head -c 1000) # Limit to the first 1000 characters
          echo "Repository name: $REPO_NAME"
          echo "Repository description: $REPO_DESC"
          echo "README (shortened): $SHORT_README"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "repo_desc=$REPO_DESC" >> $GITHUB_OUTPUT
          echo "readme=$SHORT_README" >> $GITHUB_OUTPUT

      - name: Generate YAML with ChatGPT
        id: chatgpt_response
        run: |
          echo "Generating YAML using ChatGPT..."
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-4",
              "messages": [
                {"role": "system", "content": "You are an expert YAML generator. Use the provided structure exactly as described."},
                {"role": "user", "content": "Create a YAML file with the following structure for a software repository:\n\nid: Unique identifier (repository name, without spaces or special characters)\ntitle: A title in the format \u0027<repository name> - <short description>\u0027\ntags: A list of tags related to the repository\n  - Tags should be extracted from the README, GitHub project description, and common keywords\n\nreferences:\n  - A list of URLs, including the GitHub repo URL and relevant documentation/download links\n\ndescription: A detailed description of the repository (based on the GitHub description and README)\n\nwhy_not: A suggestion of why another similar tool might be used instead, or leave it empty if no suggestion is found.\n\nRepository name: ${{ steps.fetch_metadata.outputs.repo_name }}\nDescription: ${{ steps.fetch_metadata.outputs.repo_desc }}\nREADME (shortened):\n${{ steps.fetch_metadata.outputs.readme }}\nGitHub URL: ${{ steps.extract_url.outputs.url }}"}
              ]
            }')
          YAML_CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "Generated YAML:"
          echo "$YAML_CONTENT"
          echo "yaml_content=$YAML_CONTENT" >> $GITHUB_OUTPUT

      - name: Save YAML to lake directory
        run: |
          echo "Saving generated YAML to lake directory..."
          mkdir -p lake
          echo "${{ steps.chatgpt_response.outputs.yaml_content }}" > lake/${{ steps.fetch_metadata.outputs.repo_name }}.yaml
          
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add lake/
          git commit -m "Add new program: ${{ steps.fetch_metadata.outputs.repo_name }}"
          git push
